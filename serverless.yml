service: bento

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  timeout: 900
  versionFunctions: false

  environment:
    #S3
    NEW_VIDEO_BUCKET: ${self:custom.video-upload-bucket}
    TRANSCODED_SEGMENTS_BUCKET: ${self:custom.transcoded-segments-bucket}
    FINAL_VIDEO_BUCKET: ${self:custom.processed-videos-bucket}
    #DDB
    JOBS_TABLE: ${self:custom.jobs-table}
    SEGMENTS_TABLE: ${self:custom.segments-table}
    VIDEOS_TABLE: ${self:custom.videos-table}
    #AWS cli layer
    LD_LIBRARY_PATH: "/opt/awscli/lib"
    PYTHONHOME: "/opt/awscli/lib/python2.7"
    PYTHONPATH: "/opt/awscli/lib/python2.7:/opt/awscli/lib/python2.7/lib-dynload"

  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    - "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
    - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

custom:
  #S3
  video-upload-bucket:
    Ref: videoUploadBucket
  transcoded-segments-bucket:
    Ref: transcodedSegmentsBucket
  processed-videos-bucket:
    Ref: processedVideosBucket
  #DDB
  jobs-table: BentoJobs
  segments-table: BentoSegments
  videos-table: BentoVideos

package:
  individually: true
  exclude:
    - ./**

functions:
  recordUpload:
    handler: bentoRecordUpload/recordUpload.recordUpload
    package:
      include:
        - bentoRecordUpload/recordUpload.js
    name: recordUpload
    memorySize: 512
    # provisionedConcurrency:
    # reserverdConcurrency:
    # timeout:
    layers:
      - ${cf:ffmpeg-layer-dev.FfmpegLayerExport}

  executor:
    handler: bentoExecutor/executor.execute
    name: executor
    package:
      include:
        - bentoExecutor/executor.js
    # provisionedConcurrency:
    # reserverdConcurrency:
    # timeout:
    environment:
      TRANSCODE_LAMBDA_ADDRESS: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:transcoder
    layers:
      - ${cf:ffmpeg-layer-dev.FfmpegLayerExport}

  transcoder:
    handler: bentoTranscoder/transcoder.transcode
    name: transcoder
    package:
      include:
        - bentoTranscoder/transcoder.js
    memorySize: 3008
    # provisionedConcurrency:
    # reserverdConcurrency:
    # timeout:
    layers:
      - ${cf:ffmpeg-layer-dev.FfmpegLayerExport}

  mergeInvoker:
    handler: bentoMergeInvoker/mergeInvoker.mergeInvoke
    name: mergeInvoker
    package:
      include:
        - bentoMergeInvoker/mergeInvoker.js
    memorySize: 128
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - jobsTable
              - StreamArn
          batchSize: 1
    environment:
      MERGER_LAMBDA_ADDRESS: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:merger
    # provisionedConcurrency:
    # reserverdConcurrency:
    # timeout:

  merger:
    handler: bentoMerger/merger.merge
    name: merger
    package:
      include:
        - bentoMerger/merger.js
    # provisionedConcurrency:
    # reserverdConcurrency:
    # timeout:
    layers:
      # - ${cf:awscli-layer-dev.AwscliLambdaExport}
      - ${cf:ffmpeg-layer-dev.FfmpegLayerExport}

resources:
  Resources:
    #DDB
    BentoVideos:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.videos-table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
    jobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.jobs-table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: videoId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: VideoId
            KeySchema:
              - AttributeName: videoId
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - filename
                - outputType
                - resolution
                - versionUrl
                - status
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    segmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.segments-table}
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: N
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
    #S3
    videoUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    transcodedSegmentsBucket:
      Type: AWS::S3::Bucket

    processedVideosBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - DELETE
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    ProcessedVideosS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: processedVideosBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  [
                    "",
                    ["arn:aws:s3:::", Ref: processedVideosBucket, "/*"],
                  ]
              # Condition: {
              #     "NotIpAddress": {"aws:SourceIp": "54.240.143.0/24"}
              #  }

